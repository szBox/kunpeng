<template>
  <div class="add-edit-form-box">
    <el-form ref="form" label-width="100px">
      <el-form-item label="选择部门：">
        <el-select v-model="depId" label="部门" placeholder="请选择部门">
          <el-option label="所有部门" value="0"></el-option>
          <el-option
            v-for="i in depList"
            :key="i.id"
            :label="i.name"
            :value="i.id">
          </el-option>
        </el-select>
      </el-form-item>
      <el-form-item label="选择身份：">
        <el-checkbox-group v-model="identityCheck" size="small">
          <el-checkbox v-for="i in identityList" :key="i.id" :label="i.id" border>{{i.name}}</el-checkbox>
        </el-checkbox-group>
      </el-form-item>
      <el-form-item label="教师名称：">
        <el-input style="width: 275px" placeholder="请输入教师名称" v-model="name" clearable>教师名称</el-input>
        <el-button style="display: inline" type="warning" @click="initTeacherTree()">查询</el-button>
      </el-form-item>
    </el-form>
    <hr />
    <div class="search-info-box">
      <el-alert
            :title="'当前查询到的教师数：' + allTeacherCount"
            type="info"
            class="my-alert"
            center
            :closable="false"
            show-icon>
          </el-alert>
          <el-alert
            :title="'当前选中教师数：' + treeOneSelectList.length"
            type="info"
            class="my-alert"
            center
            :closable="false"
            show-icon>
          </el-alert>
    </div>
    <div class="shuttle">
      <div class="clearfix">
        <div class="shuttle-box">
          <div class="head">
            华亿教育
          </div>
          <el-tree
            :data="teacherList"
            show-checkbox
            node-key="id"
            ref="tree"
            :default-expanded-keys="defaultExpandedKeys"
            :default-checked-keys="defaultCheckedKeys"
            :props="defaultProps"
            @check="getTreeOneNodes"
          >
          </el-tree>
        </div>
        <div class="right-arrow">
          <i class="el-icon-d-arrow-right" style="font-size:36px;"></i>
        </div>
        <div class="shuttle-box" style="padding: 20px;">
          <p v-for="i in treeOneSelectList">{{ i.name }} &nbsp;&nbsp;<span @click="removeList(i.id)" class="shuttle-remove el-icon-error"></span></p>
        </div>
      </div>
      <div class="clearfix" style="margin-left:90px;">

        <div class="shuttle-box">

          <div class="head">
            <a href="javascript:;" @click="s_r_ALL_tree2(1)" style="margin-right:10px;">全选</a>
            <a href="javascript:;" @click="s_r_ALL_tree2(0)">取消</a>
            <a href="javascript:;" @click="dialogFormVisible = true" style="float: right">权限模板</a>
          </div>

          <el-tree
            :data="allMenus"
            show-checkbox
            node-key="id"
            ref="tree2"
            :default-expanded-keys="defaultExpandedKeys"
            :default-checked-keys="defaultCheckedKeys"
            :props="defaultProps"
            @check-change="getTreeTwoNodes"
          >
          </el-tree>

        </div>

        <div class="right-arrow">
          <i class="el-icon-d-arrow-right" style="font-size:36px;"></i>
        </div>
        <div class="shuttle-box" style="text-align: center;">
          <div class="head" style="margin-bottom: 10px;">
            <a href="javascript:;">设置身份</a>
          </div>
          <el-checkbox-group v-model="identitySet" size="small">
            <div v-for="i in identityList" style="margin-bottom: 10px;"><el-checkbox :label="i.id" :key="i.id" border>{{i.name}}</el-checkbox></div>
          </el-checkbox-group>
        </div>
      </div>
    </div>
    <el-row style="margin-top:20px;">
      <el-col :span="24">
        <el-button v-has="10010101" type="primary" @click="add">提交</el-button>
        <el-button type="default" @click="$routerGo(-1)">返回</el-button>
      </el-col>
    </el-row>

    <el-dialog title="选择权限模板" :visible.sync="dialogFormVisible">
      <el-form>
        <el-checkbox-group v-model="roleCheck" size="small">
          <el-checkbox v-for="i in roleTempList" :key="i.id" :label="i.id" border>{{i.name}}</el-checkbox>
        </el-checkbox-group>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="dialogFormVisible = false">取 消</el-button>
        <el-button type="primary" @click="checkRightCodes()">确 定</el-button>
      </div>
    </el-dialog>
  </div>
</template>
<script>
  import * as depApi from '@/API/settings/school/department';
  import * as teacher from '@/API/settings/account/teacher';
  import * as identity from '@/API/settings/right/identity';
  import * as func from '@/API/settings/right/function';
  import * as role from '@/API/settings/right/role';
  export default {
    name: 'teacher_right_add',
    data(){
      return {
        allTeacherCount: 0,
        depId: '0',
        depList: [],
        identityList: [],
        identityCheck: [],
        name: '',
        allMenus: [],
        teacherList: [],
        treeOneSelectList: [],
        treeTwoSelectList: [],
        defaultExpandedKeys: [],
        defaultCheckedKeys: [],
        identitySet: [],
        defaultProps: {
          children: 'trees',
          label: 'name'
        },
        dialogFormVisible: false,
        roleTempList: [],
        roleCheck: []
      }
    },
    created(){
      this.initDep();
      this.initIdentity();
      this.initTeacherTree();
      this.initAllMenus();
      this.initRoleTemp();
    },
    methods: {
      checkRightCodes(){
        let vm = this;
        role.listRightByRids.r(vm.roleCheck).then(function (res) {
          let data = res.data;
          if(data.code == 0){
            vm.defaultCheckedKeys = !!data.data ? data.data : [];
            vm.$refs.tree2.setCheckedKeys(vm.defaultCheckedKeys, false);
          }
        });
        vm.dialogFormVisible = false;
      },
      initRoleTemp(){
        let vm = this;
        role.listOption.r(1).then(function (res) {
          let data = res.data;
          if(data.code == 0){
            vm.roleTempList = data.data;
          }
        })
      },
      initDep(){
        let vm = this;
        depApi.departOptions.r("sid=1").then(function (res) {
          let data = res.data;
          if(data.code == 0){
            vm.depList = data.data;
          }
        })
      },
      initIdentity(){
        let vm = this;
        identity.listAll.r(1).then(function (res) {
          let data = res.data;
          if(data.code == 0){
            vm.identityList = data.data;
          }
        })
      },
      initTeacherTree(){
        let vm = this;
        let params = {
          depId: vm.depId,
          name: vm.name,
          identityIds: vm.identityCheck
        };
        teacher.listTree.r(params).then(function (res) {
          let data = res.data;
          if(data.code == 0){
            vm.teacherList = !!data.data ? data.data : [];
            vm.allTeacherCount = 0;
            vm.calcTeachersCount();
          }
        })
      },
      initAllMenus(){
        let vm = this;
        func.getSimpleTrees.r().then(function(res){
          if(res.data.code == 0){
            vm.allMenus = res.data.data;
          }
        })
      },
      getTreeOneNodes() {
        let arr, vm = this, arr2 = []
        arr = this.$refs.tree.getCheckedNodes()
        arr.forEach(function (i) {
          if (!i.trees) {
            arr2.push({
              name: i.name,
              id: i.id
            })
          }
        })
        vm.treeOneSelectList = arr2;
      },
      removeList(id){
        let vm = this, arr = [], num
        vm.treeOneSelectList.forEach(function (i, index) {
          if (i.id == id) {
            num = index
          } else {
            arr.push(i.id)
          }
        })
        vm.treeOneSelectList.splice(num, 1)
        this.$refs.tree.setCheckedKeys(arr)
      },
      getTreeTwoNodes(){
        let arr, vm = this, halfC
        halfC = this.$refs.tree2.getHalfCheckedNodes()
        arr = this.$refs.tree2.getCheckedNodes()

        if (halfC.length){
          this.treeTwoSelectList = (halfC.concat(arr))
        }else{
          this.treeTwoSelectList = arr
        }
      },
      s_r_ALL_tree2(bl){
        if(bl){
          this.$refs.tree2.setCheckedNodes(this.allMenus)
        }else{
          this.$refs.tree2.setCheckedNodes([])
        }
      },
      add(){
        let vm = this;
        let param = {
          ids:[],
          rightIds:[],
          identityIds:vm.identitySet
        };
        this.treeOneSelectList.forEach(function(i){
          param.ids.push(i.id)
        });
        this.treeTwoSelectList.forEach(function(i){
          param.rightIds.push(i.id)
        });
        console.log('全部:',JSON.stringify(param));
        teacher.addRight.r(param).then(function(res){
          if(res.data.code == 0){
            vm.$message('新增成功');
            vm.$routerGo(-1);
          }
        })
      },
      calcTeachersCount() {
        let _this = this;
        for(let teacher of _this.teacherList) {
          _this.allTeacherCount += teacher.trees.length; 
        }
      }
    }
  }
</script>
<style lang="less" scoped>
  @color_1: #2f363f;
  @color_2: #d2d2d2;
  @background_color_1: #ebf5ff;

  .shuttle {
    display: flex;
    width: 100%;
  }
  .shuttle-box {
    float: left;
    font-size: 14px;
    width: 208px;
    border: solid 1px #d1d7e0;
    border-radius: 10px;
    background: #fff;
    height: 400px;
    overflow: auto;
    position: relative;
    .head {
      padding: 0 20px;
      color: @color_1;
      font-size: 14px;
      height: 40px;
      line-height: 40px;
      background-color: @background_color_1;
      border-radius: 4px 4px 0px 0px;
      border-bottom: solid 1px #d1d7e0;
      a {
        color: @color_1;
      }
    }
    p {
      margin-bottom: 5px;
      color: @color_1;
      span {
        float: right;
        color: @color_2;
      }
    }
    &:first-child {
      margin-left: 0;
    }
    li {
      line-height: 20px;
      div {
        input {
          margin-right: 5px;
        }
      }
    }
  }
  .shuttle-remove {
    cursor: pointer;
  }
  .right-arrow {
    position: relative;
    float: left;
    margin: 0 10px;
    margin-top: 200px;
    top: -18px;
    width: 90px;
    text-align: center;
  }

</style>
