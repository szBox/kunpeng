<template>
  <div class="add-edit-form-box">
    <el-form ref="form" label-width="100px">
      <el-form-item label="学生名：">
        <span>{{ student.name }}</span>
      </el-form-item>
    </el-form>
    <div class="shuttle">
      <div class="clearfix">
        <div class="shuttle-box">
          <div class="head">
            华亿教育
          </div>
          <el-tree
            :data="allMenus"
            show-checkbox
            node-key="id"
            ref="tree2"
            default-expand-all
            :default-checked-keys="studentRights"
            :props="defaultProps"
            @check-change="getTreeTwoNodes"
          >
          </el-tree>
        </div>
        <div class="right-arrow">
          <i class="el-icon-d-arrow-right" style="font-size:36px;"></i>
        </div>
        <div class="shuttle-box" style="padding: 20px;text-align: center">
          <el-checkbox-group v-model="identitySet" size="small">
            <div v-for="i in identityList" style="margin-bottom: 10px;" ><el-checkbox :label="i.id" :key="i.id" border>{{i.name}}</el-checkbox></div>
          </el-checkbox-group>
        </div>
      </div>
    </div>
    <el-row style="margin-top:20px;">
      <el-col :span="24">
        <el-button type="primary" @click="$routerGo(-1)">返回</el-button>
      </el-col>
    </el-row>
  </div>
</template>
<script>
  import * as student from '@/API/settings/account/student';
  import * as identity from '@/API/settings/right/identity';
  import * as func from '@/API/settings/right/function';
  export default {
    name: 'student_right_detail',
    data(){
      return {
        student: {},
        identityList: [],
        allMenus: [],
        studentRights: [],
        identitySet: [],
        defaultProps: {
          children: 'trees',
          label: 'name'
        }
      }
    },
    created(){
      this.initStudent();
      this.initIdentity();
    },
    methods: {
      initStudent(){
        let vm = this, stuId = this.$route.params.id;
        student.detail.r(stuId).then(function (res) {
          let data = res.data;
          if(data.code == 0){
            vm.student = data.data;
            vm.identitySet = vm.student.identityIds;
            vm.studentRights = vm.student.rightIds;
            vm.initAllMenus();
          }
        })
      },
      initIdentity(){
        let vm = this;
        identity.listAll.r(2).then(function (res) {
          let data = res.data;
          if(data.code == 0){
            vm.identityList = data.data;
          }
        })
      },
      initAllMenus(){
        let vm = this;
        func.getSimpleTrees.r().then(function(res){
          if(res.data.code == 0){
            vm.allMenus = res.data.data;
          }
        })
      }
    }
  }
</script>
<style lang="less" scoped>
  @color_1: #2f363f;
  @color_2: #d2d2d2;
  @background_color_1: #ebf5ff;

  .shuttle {
    display: flex;
    width: 100%;
  }
  .shuttle-box {
    float: left;
    font-size: 14px;
    width: 208px;
    border: solid 1px #d1d7e0;
    border-radius: 10px;
    background: #fff;
    height: 400px;
    overflow: auto;
    position: relative;
    .head {
      padding: 0 20px;
      color: @color_1;
      font-size: 14px;
      height: 40px;
      line-height: 40px;
      background-color: @background_color_1;
      border-radius: 4px 4px 0px 0px;
      border-bottom: solid 1px #d1d7e0;
      a {
        color: @color_1;
      }
    }
    p {
      margin-bottom: 5px;
      color: @color_1;
      span {
        float: right;
        color: @color_2;
      }
    }
    &:first-child {
      margin-left: 0;
    }
    li {
      line-height: 20px;
      div {
        input {
          margin-right: 5px;
        }
      }
    }
  }
  .shuttle-remove {
    cursor: pointer;
  }
  .right-arrow {
    position: relative;
    float: left;
    margin: 0 10px;
    margin-top: 200px;
    top: -18px;
    width: 90px;
    text-align: center;
  }

</style>
