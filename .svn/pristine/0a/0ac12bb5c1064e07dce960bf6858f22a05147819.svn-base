<template>
	<div class="Authority">
		<el-form ref="form" label-width="100px">
			<el-form-item label="选择部门：">
				<el-select v-model="depId" label="部门" placeholder="请选择部门">
					<el-option label="所有部门" value=""></el-option>
					<el-option v-for="i in depList" :key="i.id" :label="i.name" :value="i.id">
					</el-option>
				</el-select>
			</el-form-item>
			<el-form-item label="选择身份：">
				<el-checkbox-group v-model="identityCheck" size="small">
					<el-checkbox v-for="i in identityList" :key="i.id" :label="i.id" border>{{i.name}}</el-checkbox>
				</el-checkbox-group>
			</el-form-item>
			<el-form-item label="教师名称：">
				<el-input style="width: 220px" placeholder="请输入教师名称" v-model="name" clearable>教师名称</el-input>
				<el-button style="display: inline" type="warning" @click="initTeacherTree()">查询</el-button>
			</el-form-item>
		</el-form>
		
		<hr style="border: 1px dashed #dee1e5;margin-bottom: 16px;"/>
	    <div class="search-info-box">
	        <el-alert
	            :title="'当前查询到的教师数：' + allTeacherCount"
	            type="info"
	            class="my-alert"
	            center
	            :closable="false"
	            show-icon>
	        </el-alert>
	        <el-alert
	            :title="'当前选中教师数：' + treeOneSelectList.length"
	            type="info"
	            class="my-alert"
	            center
	            :closable="false"
	            show-icon>
	        </el-alert>
	    </div>
		
		<div class="shuttle">
	        <div class="clearfix">
	            <div class="shuttle-box">
	           		<div class="head">华亿教育</div>
			        <el-tree
			            :data="teacherList"
			            show-checkbox
			            node-key="id"
			            ref="tree"
			            :default-expanded-keys="defaultExpandedKeys"
			            :default-checked-keys="defaultCheckedKeys"
			            :props="defaultProps"
			            @check="getTreeOneNodes"
			        >
			        </el-tree>
	        	</div>
		        <div class="right-arrow">
		          	<i class="el-icon-d-arrow-right" style="font-size:36px;"></i>
		        </div>
		        <div class="shuttle-box" style="padding: 20px;">
		          	<p v-for="i in treeOneSelectList">{{ i.name }} &nbsp;&nbsp;<span @click="removeList(i.id)" class="shuttle-remove el-icon-error"></span></p>
		        </div>
	      	</div>
	      	<div class="clearfix" style="margin-left:90px;">
	        	<div class="shuttle-box">
	
			        <div class="head">
			        	<a href="javascript:;" @click="s_r_ALL_tree2(1)" style="margin-right:10px;">全选</a>
			            <a href="javascript:;" @click="s_r_ALL_tree2(0)">取消</a>
			            <a href="javascript:;" @click="dialogFormVisible = true" style="float: right">权限模板</a>
			        </div>
	
			        <el-tree
			            :data="allMenus"
			            show-checkbox
			            node-key="id"
			            ref="tree2"
			            :default-expanded-keys="defaultExpandedKeys"
			            :default-checked-keys="defaultCheckedKeys"
			            :props="defaultProps"
			            @check-change="getTreeTwoNodes"
			        >
		          </el-tree>
	        	</div>
	
		        <div class="right-arrow">
		          	<i class="el-icon-d-arrow-right" style="font-size:36px;"></i>
		        </div>
		        <div class="shuttle-box" style="text-align: center;">
			        <div class="head" style="margin-bottom: 10px;">
			            <a href="javascript:;">设置身份</a>
			        </div>
			        <el-checkbox-group v-model="identitySet" size="small">
			            <div v-for="i in identityList" style="margin-bottom: 10px;"><el-checkbox :label="i.id" :key="i.id" border>{{i.name}}</el-checkbox></div>
			        </el-checkbox-group>
		        </div>
	      </div>
	    </div>
		
		<el-row style="margin-top:20px;">
	      	<el-col :span="24">
	       		<el-button v-has="10010101" type="primary" @click="getAdd">提交</el-button>
	        	<el-button type="danger" @click="goBack">返回</el-button>
	      	</el-col>
    	</el-row>

	    <el-dialog title="选择权限模板" :visible.sync="dialogFormVisible">
	      	<el-form>
	        	<el-checkbox-group v-model="roleCheck" size="small">
	          		<el-checkbox v-for="i in roleTempList" :key="i.id" :label="i.id" border>{{i.name}}</el-checkbox>
	        	</el-checkbox-group>
	      	</el-form>
	      	<div slot="footer" class="dialog-footer">
	        	<el-button @click="dialogFormVisible = false">取 消</el-button>
	        	<el-button type="primary" @click="checkRightCodes()">确 定</el-button>
	      	</div>
	    </el-dialog>
	</div>

</template>

<script>

	import authority from '@src/network/setting/right/authority.js';
	export default {
		data() {
			return {
				
				data: [],
				name:'', //教师名称
				depId: '', //部门选择
				identityCheck: [], //身份选择
				
				depList:[],identityList:[],
				
				teacherList:[],allTeacherCount: 0,
				
				treeOneSelectList: [],
        		treeTwoSelectList: [],

		        allMenus: [],
		
		        defaultExpandedKeys: [],
		        defaultCheckedKeys: [],
		        identitySet: [],
		        defaultProps: {
		          children: 'trees',
		          label: 'name'
		        },
		        dialogFormVisible: false,
		        roleTempList: [],   //权限模板  返回的数据
		        roleCheck: []  //权限 模板 check-box id
				
			}	
				
			
		},
		methods: {
			/*部门列表*/
			depSel() {
				let params = {
					sid: this.global.session.get('user').sid,
				};
				authority.depSelect(params).then(res => {
					console.log('部门下拉', res) //接受到的参数
					if(res.data.code === 0) {
						this.depList = res.data.data;

					}
				})
			},
			/*身份列表*/
			IdentitySel() {
				let params = {
					type: 1,
				};
				authority.IdentitySelect(params).then(res => {
					console.log('身份下拉', res) //接受到的参数
					if(res.data.code === 0) {
						this.identityList = res.data.data;

					}
				})
			},
			/*查询*/
			initTeacherTree(){
				let vm=this;
		        let params = {
		          depId: vm.depId,
		          name: vm.name,
		          identityIds: vm.identityCheck
		        };
		        authority.listTreeT(params).then(function (res) {
		        console.log('树1',res)
		          if(res.data.code == 0){
		          	
		            vm.teacherList = !!res.data.data ? res.data.data : [];
		            vm.allTeacherCount = 0;
		            vm.calcTeachersCount();
		          }
		        })
		    },
		    /*所有的菜单*/
		    initAllMenus(){
		        let vm = this;
		        authority.allMenu().then(function(res){
		        	console.log('所有菜单',res)
		          if(res.data.code == 0){
		            vm.allMenus = res.data.data;
		          }
		        })
		    },
		    /*tree 1*/
		    getTreeOneNodes() {
		        let arr, vm = this, arr2 = []
		        arr = this.$refs.tree.getCheckedNodes()
		        arr.forEach(function (i) {
		          if (!i.trees) {
		            arr2.push({
		              name: i.name,
		              id: i.id
		            })
		          }
		        })
		        vm.treeOneSelectList = arr2;
		    },
		    /*移除 tree1*/
		    removeList(id){
		        let vm = this, arr = [], num
		        vm.treeOneSelectList.forEach(function (i, index) {
		          if (i.id == id) {
		            num = index
		          } else {
		            arr.push(i.id)
		          }
		        })
		        vm.treeOneSelectList.splice(num, 1)
		        this.$refs.tree.setCheckedKeys(arr)
		    },
		    /*选择权限*/
		     getTreeTwoNodes(){
		        let arr, vm = this, halfC
		        halfC = this.$refs.tree2.getHalfCheckedNodes()
		        arr = this.$refs.tree2.getCheckedNodes()
		
		        if (halfC.length){
		          this.treeTwoSelectList = (halfC.concat(arr))
		        }else{
		          this.treeTwoSelectList = arr
		        }
		     },
		    /*全选 / 取消 tree3 */
		    s_r_ALL_tree2(bl){
		        if(bl){
		          this.$refs.tree2.setCheckedNodes(this.allMenus)
		        }else{
		          this.$refs.tree2.setCheckedNodes([])
		        }
		    },
		    /*权限模板 */
		    initRoleTemp(){
		        let vm = this;
		        let params = {
		        	type:1
		        };
		        authority.templateMenu(params).then(function (res) {
		        	console.log('模板',res)
		          if(res.data.code == 0){
		            vm.roleTempList =res.data.data;
		          }
		        })
		    },
		    /*权限模板   确定*/
		    checkRightCodes(){
		        let vm = this;
		        if(vm.roleCheck.length === 0) {
					vm.$message.error('请至少选择一项');

					return;
				}else{
			        authority.templateSure(vm.roleCheck).then(function (res) {
						console.log('模板确定',res)
			            if(res.data.code == 0){
			                vm.defaultCheckedKeys = !!res.data.data ? res.data.data : [];
			                vm.$refs.tree2.setCheckedKeys(vm.defaultCheckedKeys, false);
			            }
			        });
			        vm.dialogFormVisible = false;
		        }
		    },
			calcTeachersCount() {
		        for(let teacher of this.teacherList) {
		          this.allTeacherCount += teacher.trees.length; 
		        }
		    },
			getAdd() {
		        let vm = this;
		        let param = {
		          ids:[],
		          rightIds:[],
		          identityIds:vm.identitySet
		        };
		        this.treeOneSelectList.forEach(function(i){
		          param.ids.push(i.id)
		           console.log('老师id',param.ids)
		        });
		        this.treeTwoSelectList.forEach(function(i){
		          param.rightIds.push(i.id);
		          console.log(param.rightIds)
		        });
		        if(param.ids.length==0){
		        	vm.$message.error('请至少选择一位老师');
		        }else if(param.rightIds.length==0){
		        	vm.$message.error('请至少选择一个权限');
		        }
		       	else{
		        	console.log('全部:',JSON.stringify(param));
			        authority.teacherAdd(param).then(function(res){
			          if(res.data.code == 0){
			            vm.$message.success('新增成功');
			            vm.$router.go(-1);
			          }
			        })
		        }
		        
			},
			goBack(){
            	this.$router.go(-1);
            }

		},
		mounted() {
			this.depSel(); //获取部门
			this.IdentitySel();	//获取身份
			this.initTeacherTree(); //默认 查询
			this.initAllMenus();  //1级菜单
			this.initRoleTemp();	//模板管理
		},

	}
</script>
<style>

</style>

<style lang="less" scoped>
	.Authority {
		/*padding-top: 50px !important;*/
	}
	 @color_1: #2f363f;
  @color_2: #d2d2d2;
  @background_color_1: #ebf5ff;

  .shuttle {
    display: flex;
    width: 100%;
  }
  .shuttle-box {
    float: left;
    font-size: 14px;
    width: 208px;
    border: solid 1px #d1d7e0;
    border-radius: 10px;
    background: #fff;
    height: 400px;
    overflow: auto;
    position: relative;
    .head {
      padding: 0 20px;
      color: @color_1;
      font-size: 14px;
      height: 40px;
      line-height: 40px;
      background-color: @background_color_1;
      border-radius: 4px 4px 0px 0px;
      border-bottom: solid 1px #d1d7e0;
      a {
        color: @color_1;
       
        text-decoration: none;
        &:last-child{
        	 margin: 0 !important;
        }
      }
    }
    p {
      margin-bottom: 5px;
      color: @color_1;
      span {
        float: right;
        color: @color_2;
      }
    }
    &:first-child {
      margin-left: 0;
    }
    li {
      line-height: 20px;
      div {
        input {
          margin-right: 5px;
        }
      }
    }
  }
  .shuttle-remove {
    cursor: pointer;
  }
  .right-arrow {
    position: relative;
    float: left;
    margin: 0 10px;
    margin-top: 200px;
    top: -18px;
    width: 90px;
    text-align: center;
  }
  .search-info-box .my-alert.el-alert--info {
	    background-color: #f1faff;
	    border-radius: 4px;
	    border: 1px solid #c7ebff;
	    color: #2295ff;
	}
	.search-info-box>.my-alert {
    width: 208px;
    margin-right: 104px;
    display: inline-table;
    padding: 8px 10px;
}
</style>